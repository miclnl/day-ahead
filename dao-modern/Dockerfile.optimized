# Multi-stage build for smaller production image
ARG BUILD_FROM
FROM ${BUILD_FROM} AS builder

ARG BUILD_ARCH
ENV ENV_BUILD_ARCH=$BUILD_ARCH

# Install build dependencies only
RUN apt-get update && apt-get install -y \
    # Python and build tools
    python3 python3-pip python3-dev python3-venv \
    # Database dev headers
    libmariadb-dev postgresql-client sqlite3 \
    # Compilation tools
    gcc g++ libc6-dev linux-libc-dev build-essential cmake \
    # Graphics and math libraries
    libjpeg-dev libpng-dev libfreetype6-dev \
    libopenblas-dev liblapack-dev \
    # Crypto libraries
    libffi-dev libssl-dev \
    # Build utilities
    gfortran pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment and install Python dependencies
ENV VIRTUAL_ENV=/app/dao/venv/day_ahead
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

COPY requirements.txt /tmp/
RUN pip3 install --no-cache-dir -r /tmp/requirements.txt

# Production stage - minimal runtime dependencies
FROM ${BUILD_FROM} AS runtime

ARG BUILD_ARCH
ARG BUILD_VERSION
ENV ENV_BUILD_ARCH=$BUILD_ARCH
ENV DAO_VERSION=$BUILD_VERSION

# Create non-root user
RUN useradd --system --no-create-home --shell /sbin/nologin --home-dir /app daouser

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    # Python runtime
    python3 python3-venv \
    # Database clients only (no dev packages)
    mariadb-client postgresql-client sqlite3 \
    # Essential runtime libraries
    libmariadb3 libpq5 libsqlite3-0 \
    # Crypto runtime
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder
COPY --from=builder /app/dao/venv /app/dao/venv
ENV PATH="/app/dao/venv/day_ahead/bin:$PATH"

# Copy application files
RUN mkdir -p /app/dao && chown -R daouser:daouser /app
COPY --chown=daouser:daouser __init__.py /app/dao/
COPY --chown=daouser:daouser prog /app/dao/prog/
COPY --chown=daouser:daouser webserver /app/dao/webserver/
COPY --chown=daouser:daouser data /app/daodata/

# Copy MIP libraries if needed
COPY --chown=daouser:daouser miplib.tar.gz /tmp/
WORKDIR /app/dao/prog

RUN if [ "${BUILD_ARCH}" = "aarch64" ]; then \
      tar -xvf /tmp/miplib.tar.gz -C /app/dao/prog && \
      chown -R daouser:daouser /app/dao/prog/miplib && \
      rm /tmp/miplib.tar.gz \
   ; fi

# Set environment variables
ENV BUILD_ARCH="$ENV_BUILD_ARCH"
ENV PYTHONPATH="/app:/app/dao:/app/dao/prog"
ENV PMIP_CBC_LIBRARY="/app/dao/prog/miplib/lib/libCbc.so"
ENV LD_LIBRARY_PATH="/app/dao/prog/miplib/lib/"

# Create version file
RUN printf '__version__ ="%s"\n' "$DAO_VERSION" > /app/dao/prog/version.py

# Copy run scripts
COPY --chown=daouser:daouser run /app/dao/prog/

# Switch to non-root user
USER daouser
EXPOSE 5001
WORKDIR /app/dao/prog
ENTRYPOINT ["python3", "da_entrypoint.py"]

# Labels
LABEL \
    io.hass.arch="${BUILD_ARCH}" \
    io.hass.type="addon" \
    io.hass.version=${BUILD_VERSION}